



Если в вашей компании такой процедуры не предусмотрено, вы можете ее создать! Для этого Глава 1. Предстоящее путешествие26 запишите все, что вам пришлось сделать в процессе подготовки к работе.
(См. главу 2 «Достижение осознанной компетентности».)

*****

этому моменту изначальный блеск вашей работы потускнеет, и вы начнете замечать недостатки в архитектуре, среде тестирования, системе сборки и развертывании. На данном этапе вы научитесь сочетать регу-лярную работу с обслуживанием и рефакторингом кода. Не пытайтесь все переписать. (См. главу 3 «Работа с кодом».)

*****

Один простой, но на удивление эффективный метод заключается в добавлении оператора print() в начале выполнения программы.
Такое действие позволит легко отличить модифицированную версию программы от исходной, и вам не придется тратить много часов на по-нимание загадочного поведения программы, если вместо ее измененной версии вы запустите исходную.

*****

Незавершенные задачи или проблемы отслеживаются с помощью ти­ кетов. Ознакомьтесь с тикетами своей команды, чтобы понять, над чем работают ваши коллеги и что вас ожидает в ближайшее время. Хорошим местом для поиска тикетов является бэклог. Старые задачи делятся на три категории: более не актуальные; полезные, но второстепенные; важные, но слишком сложные, чтобы их можно было решить в данный момент.
Определите, к какой категории относятся тикеты вашей команды.

*****

Шедоуинг предполагает наблюдение за тем, как более опытный со-трудник выполняет то или иное задание. Наблюдатель в данном случае является активным участником: он делает записи и задает вопросы.
Шедоуинг — отличный способ освоить новый навык. Чтобы получить максимальную пользу, выделите время до и после сессии для плани-рования и подведения итогов.

*****

Ограничьте время, выделяемое на изучение проблемы. Установите дедлайн, чтобы дисциплинировать себя и предотвратить снижение про-дуктивности. Подумайте, когда вам потребуется ответ, а затем оставьте достаточно времени для того, чтобы задать вопрос, получить на него ответ и принять соответствующие меры.
Когда

*****

Попракти-куйтесь в рефрейминге, то есть в превращении негативных мыслей в позитивные. Вместо: «Мне пришлось оторвать Дарью от работы, чтобы она помогла мне решить проблему с состоянием гонки», — лучше скажите: «Я обратился к Дарье и теперь знаю, как решить проблему с состоянием гонки!» Подумайте, чего вы хотите достичь, а когда достигнете цели, отметьте это. Так вы укрепите уверенность в себе.

*****

Учитесь мыслить в терминах компромиссов, вместо того чтобы делить вещи на правильные и неправильные.

*****

Явление нарастания беспорядка в коде называется энтропией ПО.

*****

Некоторые уроки можно извлечь только задним числом:
«Нам следовало создавать учетные записи пользователей даже для тех людей, которые не прошли процесс регистрации до конца. Мы должны фиксировать неудачные попытки регистрации в маркетинговых целях.
Теперь нам придется добавить дополнительный код, чего можно было бы избежать, если бы мы предусмотрели это в модели данных». В отличие от случая с благоразумным умышленным долгом, здесь команда не знает о возникновении долга. В отличие от неумышленного безрассудного долга, долг такого типа является скорее естественным следствием более глубокого изучения предмета или профессионального роста архи-тектора ПО, а не результатом плохого выполнения домашней работы.
Хорошей практикой является проведение ретроспективы проектов, что позволяет команде обнаруживать такой неумышленный долг и решать, когда его погашать и стоит ли это делать.

*****

Вы должны понимать ход мыслей других разработчиков, придерживаться существующих стилей и шаблонов и улучшать кодовую базу постепенно.

*****

Изменение больших кодовых баз — это навык, оттачиваемый годами, а то и десятилетиями.

*****

Нарушение инкапсуля-ции увеличивает количество вариантов поведения, которые вы должны гарантировать в течение всего жизненного цикла проекта. Более под-робно мы обсудим это в главе 11.

*****

По мере исправления ошибок и добавления функций очищайте сосед-ний код. Не ищите грязный код специально — действуйте по ситуации.
Старайтесь делать так, чтобы коммиты, связанные с очисткой кода, были отделены от коммитов, изменяющих поведение. Такое разделение ком-митов упрощает отмену

*****

Однако это код с запашком, потому что в нем можно легко допустить следующую ошибку:

*****

Кроме того, стоимость рефакторинга мо-жет превышать его ценность. Устаревшему и постепенно заменяемому коду не нужен рефакторинг, равно как и коду, который характеризуется низким уровнем риска или редко используется. Старайтесь относиться к рефакторингу прагматично.

*****

Итоговое коммит-сообщение должно быть оформлено в соответствии с правилами, принятыми вашей командой. Обычно к таким сообщениям добавляется префикс с идентификатором проблемы: «[MYPROJ123] Попытка заставить серверную часть работать с Postgres». Привязка ком-мита к конкретной проблеме позволяет разработчикам лучше понимать контекст изменения, а также применять сценарии и инструменты. При отсутствии конкретных правил следуйте советам Криса Бимса (https:// chris.beams.io/posts/git-commit).

*****

В своей книге The Hard Thing About Hard Things (Harper Business, 2014)1 Бен Хоровиц пишет следующее:
«Главное, что должен сделать любой технологический стартап, — создать продукт, который справляется с какой­либо задачей как минимум в десять раз лучше по сравнению с существующим решением.
Если новый продукт будет превосходить существующий лишь в два или три раза, этого не хватит для того, чтобы заставить людей переключиться на него достаточно быстро или в достаточно значи­ тельном объеме, — а смысл именно в этом».

*****

Проблема новых технологий заключается в их незрелости. В своей пре-зентации Choose Boring Technology Дэн Маккинли отмечает: «Виды от-казов скучных технологий хорошо изучены» (http://boringtechnology.club/).
Все технологии дают сбой, но в отличие от новых технологий старые делают это предсказуемым образом. Незрелость технологии означает малочисленность ее сообщества, меньшую стабильность, менее подроб-ную документацию и худшую совместимость. На сайте Stack Overflow содержится гораздо меньше ответов на вопросы, связанные с новыми технологиями.

*****

Иногда новые технологии позволяют решить проблемы вашей ком-пании, а иногда — нет. Чтобы понять, когда использование новой технологии является оправданным, требуются дисциплина и опыт.
Потенциальная выгода должна превышать стоимость. За каждое реше-ние об использовании новой технологии приходится платить «токеном инноваций». С помощью этой концепции Дэн стремится показать, что усилия, затрачиваемые на внедрение новых технологий, могут быть потрачены на разработку инновационных функций. Количество таких токенов у компаний ограничено.

*****

Зрелость экосистемы нового языка имеет огромную важность. Хоро-шо ли продумана система сборки и управления пакетами? Как поддер-живается IDE? Есть ли среди мейнтейнеров важных библиотек опытные разработчики? Доступны ли тестовые фреймворки? Есть ли возмож-ность заплатить за поддержку, если она понадобится? Можно ли нанять инженеров, обладающих соответствующими навыками? Насколько легко освоить данный язык? Какова его эффективность? Можно ли интегрировать языковую

*****

Применение вашего индивидуального подхода обойдется слишком дорого.

*****

Плохая практика — создавать форк без намерения вносить изменения в исходный репозиторий. Такое бывает при возникновении разно-гласий по поводу направления развития проекта, при его заморозке или наличии сложностей с внесением изменений в основную кодовую базу.

*****

К особо пагубным последствиям приводит развитие внутреннего форка компании. При этом разработчики обычно обещают друг другу внести изменения «потом», но этого, как правило, так и не происходит.
Незначительных изменений, не вносимых в вышестоящий репозиторий, со временем становится все больше, и в конце концов форк превраща-ется в совершенно независимое программное обеспечение. Становится все труднее вносить в исходный репозиторий функции и исправления.
В итоге команде приходится поддерживать еще один полноценный проект. Некоторые компании даже создают форки собственных про-ектов с открытым исходным кодом, потому что не вносят внутренних изменений.

*****

Рефакторинг часто перерастает в полномасштабное переписывание кода. Рефакторинг существующего кода — задача непростая, и часто появляется соблазн просто отказаться от старой системы и переписать все с нуля. Считайте переписывание крайней мерой. Этот совет основан на многолетнем опыте.

*****

В каких-то случаях переписывание кода оправданно, в каких-то — нет.
Сообщите команде о своем желании переписать код, однако имейте в виду, что ваша антипатия к языку или фреймворку не является до-статочно уважительной причиной для этого. Переписывать код следует лишь в том случае, если потенциальная выгода превышает затраты. Кро-ме того, следует помнить, что переписывание кода сопряжено с риском, а его стоимость довольно высока. Помимо всего прочего, инженеры склонны недооценивать

*****

Переписывать

*****

Выполняйте проверки на наличие значений null в начале методов.
По возможности используйте аннотации NotNull и аналогичные язы-ковые функции. Предварительная проверка того, что значение пере-менных не равно null, даст последующему коду основание полагать, что он имеет дело с реальными значениями: это сделает код более чистым и удобочитаемым.

*****

Никогда не доверяйте входным данным, которые получает ваш код.
Из-за ошибок разработчиков, неисправности оборудования и челове-ческого фактора они могут оказаться поврежденными. Чтобы защитить свой код, удостоверьтесь в корректности входных данных. Используйте предусловия и контрольную сумму, проводите валидацию данных, при-меняйте передовые методы обеспечения безопасности и инструменты для нахождения распространенных ошибок. Старайтесь как можно раньше отклонять некорректные входные данные.

*****

При вызове кода, способного сгенерировать исключения, следует либо полностью их обрабатывать, либо обеспечить их распространение вверх по стеку.

*****

Зачастую самой правильной реакцией на ошибку является повторная попытка. В отдельных ситуациях имеет смысл запланировать некоторое количество повторных попыток при обращении к удаленным системам.
Повторная попытка не сводится к простому перехвату исключения и повтору операции. На практике принятие решения относительно того, когда и как часто необходимо повторять попытки, требует определен-ного ноу-хау.

*****

Не следует слепо повторять все неудачные вызовы, особенно связанные с записью данных или выполнением какого-либо бизнес-процесса.
Лучше позволить приложению аварийно завершить работу при обна-ружении ошибки, для обработки которой оно не предназначено: то есть лучше потерпеть неудачу быстро. Такой подход предотвращает даль-нейшие повреждения и позволяет человеку определиться с правильным планом действий. Позаботьтесь о том, чтобы терпеть неудачу не только быстро, но и громко:

*****

Атомар­ ные логи, содержащие всю необходимую информацию в одной строке, лучше работают с агрегаторами журналов. Не стоит рассчитывать Логирование 85 на то, что логи будут отображаться в определенном порядке: многие операционные инструменты изменяют порядок сообщений или даже отбрасывают их. Не стоит полагаться и на упорядочение с помощью временных меток, поскольку показания системных часов могут быть сброшены или отличаться у различных хостов. Не используйте в жур-налах символы перевода строки, поскольку многие агрегаторы жур-налов воспринимают новые строки в качестве отдельных сообщений.
Удостоверьтесь в

*****

Например, в Java есть три способа конкатенации строк в вызовах метода ведения журнала, два из которых конкатенируют строковый параметр перед вызовом метода trace:
while(messages.size() > 0) {  Message m = message.poll();
// Эта строка конкатенируется даже при отключенной трассировке!
log.trace("got message: " + m);
// Эта строка тоже конкатенируется при отключенной трассировке.
log.trace("got message: {}".format(m));
// Эта строка конкатенируется только при включенной трассировке.
// Так быстрее.
log.trace("got message: {}", m);
} В последнем

*****

Асинхронные аппендеры регистрируют сообщения в журнале, не блокируя потоки выполнения: это повышает производительность, поскольку коду приложения не нужно ждать, ког-да записи будут внесены в журналы. Пакетные (batching) аппендеры буферизуют сообщения журнала в памяти перед их записью на диск, тем самым повышая пропускную способность

*****

Если после повышения степени дета-лизации журнала с целью отладки вы обнаружите, что ошибка исчезла, знайте, что причиной этого может быть само изменение метода ведения журнала.

*****

Будьте осторожны при работе с конфиденциальными данными. Сообще-ния журнала не должны содержать такие личные данные, как пароли, токены безопасности, номера кредитных карт или адреса электронной почты. Это может показаться очевидным, однако в данном случае лег-ко допустить ошибку, поскольку зарегистрированный URL-адрес или HTTP-ответ может содержать информацию, защиту которой агрегаторы журналов не обеспечиваю

*****

Измерения не требуют больших затрат, поэтому вам следует проводить их как можно чаще. В частности, измеряйте:
  пулы ресурсов;
  кэши;
  структуры данных;
  операции с интенсивным использованием ЦП;
  операции с интенсивным вводом-выводом;
  размер данных;
  исключения и ошибки;
  удаленные запросы и ответы.
Используйте измерители для определения размера пулов ресурсов.
Обратите особое внимание на пулы потоков и пулы соединений. Боль-шие размеры пулов указывают на то, что система зависла или не справ-ляется с нагрузкой.

*****

Один-единственный вызов API фронтенда может породить сотни нисходящих RPC-вызовов, адресованных различным службам.
Распределенная трассировка вызовов позволяет объединить все эти нисходящие вызовы в один граф. Распределенная трассировка полезна для отладки, измерения производительности, понимания зависимостей и анализа стоимости системы, то есть для ответа на вопросы вроде:
«Какие API являются наиболее дорогими в обслуживании?», «Какие заказчики обходятся дороже всего?» и т. д.

*****

Понимание транзитивных зависимостей является важной частью управ-ления зависимостями. Добавление зависимости может показаться не-значительным изменением, но если у библиотеки 100 зависимостей, то теперь ваш код будет зависеть от 101 библиотеки. Любое изменение зависимости может повлиять на ваш код. Убедитесь в том, что вы по-нимаете, как можно получить дерево зависимостей для отслеживания и решения конфликтов зависимостей.

*****

Компилятор Java находил в google-collections ссылки на классы бы-стрее, чем Guava, а затем пытался вызвать методы, которых не было в ранней версии библиотеки.
В конце концов команда изолировала пути к классам, и впоследствии Azkaban перестал добавлять файлы JAR в среду выполнения кода. В какой-то степени это решало основную проблему, однако иногда ошибки все равно появлялись. Затем команда обнаружила, что пакеты, которые часто выдавали ошибку, содержали зависимости как google-collections, так и Guava. Система сборки не могла определить, что google-collections представляла собой устаревшую в

*****

Проект, зависящий только от библиотеки httpclient (см. предыдущий пример), не должен явно использовать классы в httpcore, commons-logging и commons-codec (зависимости httpclient). В противном случае необходимо объявить прямую зависимость от библиотеки.

*****

Никогда не используйте циклические зависимости. Они приводят к странному поведению системы сборки и проблемам с порядком раз-вертывания. Системы сборки будут сначала работать, но затем начнут выдавать ошибки. Ошибки появятся и в приложениях.
Защитите себя от циклических зависимостей с помощью инструментов сборки. Многие системы сборки имеют средства обнаружения цикли-ческих зависимостей, которые в случае нахождения такой зависимости вас предупредят. Если система сборки не предупреждает о циклических зависимостях, можно воспользоваться специальными плагинами.

*****

Следует Не следует Использовать семантическое управление версиями Использовать хеши коммитов в качестве номеров версий Использовать закрепление диапазонов версий зависимости Добавлять зависимость, если ее польза не превы-шает затраченных усилий Использовать генератор отчетов о транзитивных зависимостях Использовать транзитивные зависимости непо-средственным образом Скептически относиться к добавлению новых зависимостей Вводить циклические зависимости Определять область действия ваших зависимостей Повышение

*****

Несмотря на то что управлять зависимостями чрезвычайно сложно, книг по этой теме написано очень мало — в интернете вы можете найти объяснения и обсуждения только Повышение уровня 117 отдельных систем. Для общего понимания взгляните на статью в Вики-педии об аде зависимостей и пройдите по предложенным там ссылкам.

*****

собой в тесте, то с большой вероятностью вы пишете интегра-ционный тест. Обычно такое тестирование выполняется медленно и требует сложной настройки. Разработчики нечасто проводят такое тестирование, поскольку на получение обратной связи нужно много времени. Интеграционные

*****

Тесты производительности, такие как нагрузочные и стресс-тесты, измеряют производительность системы при различных настройках.
Нагрузочный тест измеряет производительность при разной нагрузке:
например, во время работы системы при одновременном обращении 10, 100 или 1000 пользователей. Стресс­тесты доводят нагрузку до максимума и показывают, что происходит с системой при чрезвычайной нагрузке. Такие тесты полезны для планирования мощности системы и определения целей уровня обслуживания.

*****

Тем не менее не слишком зацикливайтесь на том, чтобы сразу сделать все идеально. В успешных проектах по результатам тестов принимаются реалистичные практичные решения, и вы должны поступать так же. Если видите возможность улучшить тест или набор тестов, воспользуйтесь ею! Не зацикливайтесь на именах или категориях и не вините себя, если делаете что-то неправильно:
энтропия ПО — мощная сила (см. главу 3).

*****

Злоупотребление заглушками является признаком плохого кода. Каж-дый раз, когда вам захочется использовать заглушку, подумайте о том, можно ли реорганизовать код так, чтобы была возможность удалить зависимость от имитируемой системы. Отделение логики вычислений и преобразования данных от кода ввода-вывода помогает упростить процесс тестирования и делает программу менее хрупкой.

*****

Статические анализаторы особенно важны для динамических языков, например для Python или JavaScript, в которых нет функции, отвечающей за обнаружение синтаксических ошибок.

*****

Инструменты определения сложности кода защищают его от слишком сложной логики, вычисляя цикломатическую сложность или, условно говоря, количество путей в вашем коде. Чем выше сложность кода, тем труднее будет его протестировать и тем больше ошибок может в нем содержаться. Цикломатическая сложность в программе увеличивается с размером базы кода, так что высокий общий показатель сложности не всегда означает что-то плохое. Однако резкое увеличение сложности должно вызывать обеспокоенность.

*****

Инструменты покрытия кода измеряют количество строк, которое было проверено тестами. Если ваше изменение снижает покрытие кода, нужно писать больше тестов. Убедитесь в том, что тесты проверяют все внесенные в код изменения. Стремитесь к тому, чтобы покрытие составляло 65–85 % всего кода. Не забывайте, что сам по себе параметр покрытия не является показателем качества программы тестирования:
данный параметр может вводить разработчика в заблуждение как при высоких, так и при низких показателях. Тестирование автоматически сгенерированного кода,

*****

Зависимости тестов рекомендуется хранить отдельно от зависимостей кода. Если для выполнения тестов необходима библиотека, не заставляй-те всю кодовую базу зависеть от этой библиотеки. Большинство систем сборки и упаковки позволяют хранить зависимости тестов в отдельном месте, так что по возможности пользуйтесь данной функцией.

*****

Не пишите много тестов. Очень легко потерять представление о том, ка-кие тесты стоит писать. Пишите тесты, которые будут выдавать ошибки, имеющие значение. Не пытайтесь написать тест с большим покрытием лишь для того, чтобы увеличить площадь покрытия кода. Нет смысла в тестировании оберток баз данных, библиотек сторонних разработчи-ков или назначений базовых переменных, даже если это увеличивает площадь покрытия кода. Сосредоточьтесь на тестах, которые с большей вероятностью могут повлиять на код.

*****

Высокое покрытие кода не гарантирует корректности кода. Выполнение кода теста учитывается при расчете покрытия, но это не означает, что это полезное увеличение параметра покрытия. Даже в кодовых базах, где покрытие составляет 100 %, могут возникать критические ошибки. Попытка добиться высокого покрытия не приведет ни к чему хорошему.

*****

Сосредоточьте усилия на самых значимых тестах. Написание и под-держание тестов требуют времени. Если смотреть на написание тестов с точки зрения затрат, то больше всего выгоды вы получите от наиболее значимых тестов. Используйте матрицу рисков, чтобы найти области, на которых следует сконцентрироваться. Матрица рисков определяет риск в виде влияния сбоя и вероятности сбоя.

*****

Детерминированный код всегда выдает один и тот же результат для одних и тех же входных данных. Однако недетерминированный код может выдавать разные результаты для одних и тех же входных данных.
Юнит-тест, вызывающий удаленный веб-сервис через сетевой сокет, является недетерминированным — если нет соединения, он выдаст ошибку. Недетерминированные тесты — проблема, с которой сталкива-ются многие программисты. Важно понимать, чем именно недетерми-нированные тесты плохи, как их можно исправить и что делать, чтобы не писать такие тесты.
Недетерминированные тесты понижают тестовое значение. Сбои в те-стировании (известные как нестабильные тесты) очень тяжело повто-рить или отладить, так как ошибка не возникает при каждом запуске теста. Вы не знаете, где допущена ошибка: в тесте или самом коде.
Поскольку нестабильные тесты не дают никакой информации, раз-работчики могут их игнорировать, из-за чего в результате получается неправильно работающий код.

*****

Генераторы случайных чисел должны получать начальное значение, определяющее случайные числа, которые вы будете получать. По умол-чанию генераторы случайных чисел используют системные часы в каче-стве начального значения. Значение часов системного времени меняется, поэтому два запуска теста с генератором случайных чисел дадут разные результаты — это недетерминизм.

*****

Модульные тесты, зависящие от удаленных систем, перестают быть переносимыми, так как устройство, на котором выполняется тестиро-вание, должно иметь доступ к удаленной системе. При этом удаленные системы чаще всего находятся во внутренних средах интеграционных тестов, к которым нелегко получить доступ.
Вы можете отказаться от использования удаленных систем в юнит-тестах с помощью заглушек или рефакторинга кода, так как удаленные системы нужны только для интеграционного тестирования.

*****

Утечка ресурсов также вызывает недетерминизм. В операционных си-стемах есть ограничение на количество сетевых сокетов и дескрипторов файлов, так что при утечке большого количества ресурсов операцион-ные системы будут отклонять новые запросы. Тест, который не может получить доступ к новым сетевым сокетам или дескрипторам файлов, выдаст ошибку. Утечка сетевых сокетов также нарушает работу тестов, использующих один и тот же порт. Даже если тесты выполняются по-следовательно, второй

*****

Тесты не должны привязываться к определенному сетевому порту.
Статическая привязка порта вызывает недетерминизм: тест, успешно работающий на одном устройстве, на другом может выдать ошибку, если порт будет занят. Привязка всех тестов к одному порту — распро-страненная практика в случае, если тесты проводятся поочередно, а не параллельно. Ошибки тестирования будут недетерминированными, так как порядок выполнения тестов не всегда одинаков.

*****

Тесты могут влиять на скорость и производительность друг друга.
Хранение нескольких тестов в одном и том же хранилище данных может Детерминизм в тестировании 137 привести к тому, что тесты будут конфликтовать между собой. Чтобы из-бежать конфликта, следуйте нашим указаниям из предыдущего раздела «Создание уникальных путей к файлам и базам данных».

*****

Тестирование не должно зависеть от порядка выполнения тестов. Зави-симость от порядка обычно возникает в том случае, когда при выполне-нии одного теста запоминаются данные, а при выполнении следующего предполагается, что сохраненные данные уже есть. Это может привести к следующим проблемам.
  Если первое тестирование заканчивается сбоем, то второе также не будет выполнено.
  Невозможно выполнять тесты параллельно, так как вы не можете запустить второй тест без выполненного первого.
  Изменения в первом тесте могут нарушить выполнение второго.
  Изменения в исполнителе тестов могут привести к изменению по-рядка выполнения тестов.

*****

Качественное рецензирование кода всегда высоко ценится. У ревью кода есть вполне очевидные достоинства — вы можете узнать об ошиб-ках или сделать код простым. Однако преимущества такой проверки выходят за рамки участия программиста в автоматизированных тестах и контроле качества кода. Хорошие рецензии кода могут служить учеб-ным материалом, распространять информацию, создавать документацию о выполненных решениях, а также предоставлять записи об изменениях для обеспечения безопасности кода.

*****

Некоторые платформы для ревью кода имеют встроенную поддержку:
например, у GitHub есть «черновой запрос на включение» (draft pull request). Как только станет понятно, что в вашем черновике не так много ошибок, вы сможете перевести его из состояния «черновик», завершив разработку, выполнив соответствующие тестирования и составив до-кументацию, а также отшлифовав детали. Четко определите, когда ваш код готов к полноценному рецензированию, а затем подготовьте запрос на ревью, как описано в предыдущем разделе.

*****

Сделайте ваш цикл программирования и тестирования быстрым — в таком случае вы сразу будете знать, если внесенные в код изменения нарушают работу кода. Затратив на это время в самом начале, вы сэкономите свое время в будущем. Это поможет вам также наладить связь с коллегами.

*****

После внесения в код больших изменений его следует прогнать. Про-гон — это личная встреча, на которой разработчик на общем экране показывает выполнение кода и знакомит коллег с внесенными измене-ниями. Прогоны помогают команде принять изменения и позволяют обменяться идеями.

*****

Разработчик не всегда с легкостью может принять критику кода со сто-роны. Держите эмоциональную дистанцию — комментарии касаются не вас, а кода, который на самом деле даже и не ваш, а всей команды.
Если вы получаете большое количество правок и предложений, это не значит, что вы не справились: это знак того, что рецензент работает над вашим кодом и предлагает варианты по его улучшению. Получать большое количество комментариев, особенно не являясь опытным раз-работчиком, вполне нормально.
Рецензенты могут попросить внести изменения, которые кажутся не-важными или которые можно внести позже. Старайтесь сохранять непредвзятость и понимать причину появления замечаний. Здраво вос-принимайте критику и будьте готовы менять код на основе полученной обратной связи.

*****

Вносите изменения в код сразу же, как получите на это разрешение.
Не стоит оставлять проведенное рецензирование кода без внимания — ваши коллеги могут ждать, когда вы внесете изменения, или могут за-хотеть изменить код после слияния. Если вы будете затягивать время, ваш код придется переделывать и исправлять. Иногда преобразование может нарушить логику кода, из-за чего потребуется повторно выпол-нить ревью кода.

*****

У быстро работающих команд в работе может быть большое количество ревью. Вам не нужно анализировать каждое изменение. Постарайтесь сосредоточиться на изменениях, которые вам понятны и находятся в знакомом для вас коде.

*****

Совершенно естественно, что при ревью кода вы нацеливаетесь на поиск ошибок, но отзыв не должен состоять только из негатива. Отмечайте и положительные моменты! Если при чтении кода вы узнаете что-то новое, то в обратной связи сообщите об этом разработчику. Если в про-цессе рефакторинга устраняются ошибки в коде или новые тесты делают будущие изменения менее рискованными, напишите положительный комментарий. Даже об изменении, которое вам не нравится, можно на-писать что-то хорошее — а если совсем не за что, то просто похвалите за стремление и приложенные усилия.
Очень интересное изменение. Я понимаю желание перенести код очереди в стороннюю библиотеку, но я не хочу добавлять новую зависимость. Код достаточно простой и отлично справляется с по­ ставленными задачами. Обязательно сообщите, если я неправильно понимаю мотивацию. Надеюсь обсудить более подробно.

*****

Вы должны понимать, каким образом ваш код попадает к пользовате-лям. Понимание процесса доставки поможет справляться с задачами и контролировать внедрение изменений. Вам необязательно принимать в этом участие лично: процесс может быть автоматизирован или вы-полняться релиз-инженерами, но этапы между git commit и реальным трафиком не должны быть для вас загадкой.

*****

К сожалению, для этапов доставки нет определений, принятых в каче-стве производственного стандарта. В зависимости от того, с кем вы разго-вариваете, такие понятия, как выпуск и развертывание, могут обозначать разные этапы процесса доставки ПО. Участники вашей команды могут называть весь процесс доставки, начиная от упаковки и заканчивая вы-грузкой, выпуском. Они могут назвать выпуском упаковку артефакта, а открытие доступа для скачивания артефакта — публикацией.

*****

Существуют две основные модели: магистральная разработка и разработка на основе функциональных веток.
При использовании магистральной разработки программисты не ра-ботают на магистрали. Ветки создаются для написания небольшой функции, исправления ошибки или обновления.

*****

Магистральная разработка работает лучше всего в том случае, когда ветви быстро (за несколько дней, а может, и часов) соединяются с маги-стралью и не распределяются между разработчиками. Чаще всего про-цесс соединения известен как непрерывная интеграция (CI). Поскольку Стратегии ветвления 159 о внесенных изменениях узнают сразу все разработчики, снижается вероятность значительного расхождения в их действиях. Синхрониза-ция кодовых баз разработчиков позволяет выявлять ошибки и несовме-стимости интеграции на ранних этапах. Однако ошибки в магистрали могут затормозить работу всех разработчиков. Для предотвращения таких ситуаций перед объединением веток с магистралью проводятся быстрые автоматизированные тесты. У команд часто имеются явные процессы для обнаружения неисправностей в магистрали: ожидается, что магистраль всегда должна быть работоспособной, так как релизы происходят очень часто.

*****

При использовании разработки на основе функциональных веток боль-шинство разработчиков одновременно работают с долго существующи-ми функциональными ветками, где каждая ветка связана с каким-то функциональным элементом в продукте. Поскольку функциональные ветки существуют достаточно продолжительное время, разработчикам нужно включать изменения из магистрали в свой код, чтобы функцио-нальная ветка не слишком расходилась с основным кодом. Ветки оста-ются стабильными благодаря контролю в тот момент, когда происходит объединение изменений. При подготовке релиза в его ветку включаются функциональные ветки. Ветки релиза проходят тестирование, а функ-циональные продолжают дорабатываться. Пакеты обычно проходят сборку на основе стабильных выпускаемых веток.

*****

Поймите стратегию ветвления, используемую вашей командой, и при-держивайтесь ее. Стратегии ветвления определяют, когда выходят обновления, устанавливают ожидания от тестов, определяют варианты устранения неполадок и количество версий, в которые следует пере-нести изменения. Многие компании разрабатывают внутренние ин-струменты, помогающие руководить процессами системы управления версиями. Эти скрипты будут автоматически ветвиться, объединяться и отмечаться

*****

За каждый цикл публикуется меньше изме-нений и исправлений, и риск возникновения ошибок в каждом релизе Глава 8. Доставка программного обеспечения168 очень маленький. Когда ошибка попадает в среду эксплуатации, для отладки требуется выполнить небольшое количество изменений. При этом разработчики все еще помнят свой код, что значительно упрощает и ускоряет исправление ошибки.

*****

При не-прерывной доставке люди исключены из процесса. Упаковка, тестиро-вание, развертывание и даже выгрузка полностью автоматизированы.
Развертывание выполняется с определенной частотой — например,

*****

Вы можете обнаружить, что полностью автоматизировать процесс развертывания невозможно, — и в этом нет ничего страшного. Развер-тывание, зависящее от действий человека, никогда нельзя полностью автоматизировать. Просто сделайте все возможное, чтобы ограничить проблемные задачи, и автоматизируйте то, что получается.

*****

Избегайте создания очереди развертывания. Требования к порядку развертываний замед-ляют процесс, так как приложения должны ждать друг друга. Когда обновления двух приложений взаимосвязаны, требования к порядку чаще всего приводят к возникновению конфликта.

*****

В конце концов в LinkedIn запретили применять порядок развертывания.
Сервисы должны были поддерживать независимое развертывание, иначе их не разрешалось публиковать для пользователей. Из-за этого запрета у разработчиков появилось много работы: пришлось вносить изменения во все сервисы, инструменты, тесты и процессы разверты-вания. Однако

*****

Существует множество методов выгрузки: флаги функций, шаблон Circuit Breaker («Автоматический выключатель»), тайный запуск (dark launch), канареечный выпуск и сине-зеленое развертывание. Флаги Глава 8. Доставка программного обеспечения174 функций позволяют контролировать то, какой процент пользова-телей получает доступ к одной ветке кода по сравнению с другой.
Шаблон Circuit Breaker при возникновении проблем автоматически переключает ветви кода. Тайный запуск, канареечный выпуск и сине­ зеленое развертывание позволяют одновременно

*****

Однако не увлекайтесь использованием слишком изощренных стратегий выгрузки, так как они значительно усложняют работу. Операторы и разработчики должны одновременно поддерживать несколько версий кода и отслеживать, какие функции включены, а какие — выключены. Используйте сложные стратегии выгрузки только при работе с большими изменениями.

*****

Такие флаги могут быть булевыми значениями включения-выклю-чения, списками разрешений, функциями линейного изменения на основе процентов или даже небольшими функциями. Булево значение переключает доступ к функции для всех пользователей. В списках раз-решений указаны функции для определенных пользователей. Функции линейного изменения позволяют разработчикам постепенно включать функцию для разных пользователей. Сначала функцию проверяют на тестовых учетных

*****

Флаги функций иногда могут использоваться для А/В-тестирова-ния — измерения поведения пользователей при внедрении новой функции. А/В-тестирование подходит в том случае, если все пользо-ватели сгруппированы статистически значимым образом. Проводите А/В-тестирование, только если система флагов создает для вас тестовые сегменты, а тестирование проводит специалист по обработке и анализу данных.

*****

При сине­зеленом развертывании запускаются две разные версии при-ложения: активная и пассивная. На рис. 8.7 показан пассивный кластер (синий) с версией 1.0, а также активный кластер (зеленый) с версией 1.1.
Развертывание новой версии выполняется в пассивной среде. Когда процесс завершен, трафик перенаправляется на новую версию: таким образом, новая версия становится активной, а старая — пассивной.
Как и при канареечном развертывании, если в новой версии есть неко-торые проблемы, то весь трафик можно снова направить на старую вер-сию. В отличие от канареечного развертывания, трафик направляется атомарным образом, а синие

*****

Инстру-мент Diffy с открытым исходным кодом отправляет тайный трафик трем экземплярам бэкенд-сервиса: два из них содержат рабочую версию кода, а один — нового кандидата на релиз. Diffy сравнивает отклики новой и старой версий и выявляет различия, после чего сравнивает отклики двух старых версий для выявления не определенного ранее шума. Это позволяет Diffy автоматически выявлять будущие различия и удалять ошибочное срабатывание.

*****

Оценив сложившее-ся положение, тимлид объявил ситуацию недопустимой: команде пришлось прекратить разработку функций и заняться решением проблемы техниче-ского долга. У инженера, работающего с системой, было множество идей по поводу улучшения сервиса, однако даже самое небольшое изменение могло привести к неожиданным проблемам в эксплуатируемом коде.

*****

Было решено в первую очередь сосредоточиться на стабилизации си-стемы, находящейся в эксплуатации, и применить для этого тайную за-пись. Инженеры использовали инструмент Diffy: в течение двух недель сравнивали объекты в потоке, а не ответы HTTP.

*****

Работа дежурным инженером может стать причиной выгорания, поэтому в конце главы мы поговорим о том, почему не стоит брать на себя роль героя.

*****

«Ваше лучшее качество — ваша доступность». При работе дежурным вам предстоит отвечать на запросы и реагировать на происшествия.

*****

Вы не обязаны в своих ответах сразу давать решение. Сообщите чело-веку, что увидели его запрос, и убедитесь в том, что правильно поняли суть проблемы.
Спасибо за обращение! Хочу уточнить: сервис входа в систему вы­ дает код отклика 503 от сервиса профилей? Вы же говорите не про авторизацию? Это два разных сервиса, но их названия очень похожи, и их часто путают.

*****

Если вы не можете определить серьезность проблемы, обратитесь за по-мощью к другим специалистам. На этапе сортировки у вас нет времени доказывать, что вы можете справиться со всеми проблемами самостоя-тельно, — время очень ценно.

*****

Снижение рисков — это не решение проблемы, а только уменьшение на-носимого ей урона. На устранение проблемы может уйти много времени, в то время как на снижение рисков требуется пара мгновений.

*****

В идеале программное обеспечение должно иметь runbook для решения проблем. Runbook — это пошаговая инструкция для решения распростра-ненных проблем и выполнения действий вроде перезапуска или отката.
Убедитесь в том, что знаете, где находятся runbook и руководство по поиску и устранению неисправностей.

*****

Проблема: из хранилища данных пропали данные 1. Почему? Коннектор не загружал данные в хранилище данных.
2. Почему? Коннектору не удавалось десериализовать входящие со-общения.
3. Почему? У входящих сообщений были некорректные заголовки.
4. Почему? APM вставлял в сообщения заголовки.
5. Почему? У APM такое поведение было установлено по умолчанию без ведома разработчика.
В данном примере первопричиной была случайная настройка заголовка сообщения APM.

*****

Изучение старых документов постмортема — отличный способ научить-ся чему-то новому. Некоторые компании даже публикуют постмортемы, из которых каждый желающий может узнать для себя много полезного.
Дан Луу собрал целую коллекцию таких документов (https://github.com/ danluu/post-mortems). Вы также можете попробовать найти группы чте-ния постмортемов в своей компании, когда команды собираются для

*****

Этот пример иллюстрирует многие методы, описанные в разделе «Важ-ные навыки дежурного». Джанет, дежурный инженер, обращает внима­ ние на сообщение и выделяет на него время. На первое сообщение она отвечает в течение 30 минут. Джанет четко озвучивает интересующие ее вещи, задает уточняющие вопросы для понимания проблемы и ее влияния на других, чтобы правильно расставить приоритеты. Джанет указывает предположительное время, когда у нее будет достаточно ин-формации для того, чтобы разобраться с проблемой. Как только Джанет кажется, что проблема решена, она подводит итог проделанной работы:
описывает причину проблемы, а затем просит обратную связь для под-тверждения того, что вопрос закрыт.

*****

Предоставление поддержки может отвлекать, так как ваша «настоящая» работа — это программирование. Воспринимайте работу в поддержке как возможность научиться чему-то новому. Вы увидите, как ПО вашей команды используется на практике, что иногда оно выдает ошибки или путает пользователей. Отвечая на запросы поддержки, вы познакомитесь с частями кода, с которыми до этого вам не удавалось поработать: вам придется хорошенько подумать и поэкспериментировать. Вы заметите закономерности, вызывающие проблемы, которые помогут вам создавать более качественное программное обеспечение в будущем. Выполнение за-дач поддержки сделает из вас хорошего инженера. К тому же вы сможете помочь другим людям, улучшить свою репутацию и завести новые знаком-ства. Быстрые, четкие и качественные ответы поддержки очень ценятся.

*****

«Пожарные», которых привлекают для решения каждой проблемы, превращаются в постоянных дежурных. А переработки и большая ответственность приводят к выгоранию. Эти инженеры стал-киваются и с проблемами в своей основной работе, так как их постоянно от нее отвлекают. Команды, полагающиеся на «пожарных», не смогут набраться собственного опыта и не приобретут необходимых навыков.
Это может привести даже к такой ситуации, когда команда не начнет заниматься решением серьезной проблемы, ожидая, что сейчас придет тот самый инженер и все решит.

*****

Разработка программного обеспечения не является линейным процес-сом от проведения исследований и мозгового штурма до составления документации и утверждения проекта. Она больше похоже на спираль, в которой чередуются индивидуальная работа в технике высокой про-дуктивности и совместная работа, и на каждом новом этапе проект улучшается

*****

Знакомьте коллег с вашим проектным предложением постепенно, еще в процессе работы над ним. Неудачный результат работы будет более вероятным, если готовый проектный документ — это первое, что другие команды и технические руководители узнают о вашей работе. Каждая сторона имеет свои взгляды и свои интересы и может резко отреагиро-вать на сюрприз — появление проекта, в котором она не имела права голоса.

*****

Сеансы получения обратной связи не обязательно должны быть фор-мальными или запланированными. Непринужденные разговоры за ланчем, в коридоре или перед началом совещания — это нормально, даже предпочтительно. Ваша цель — рассказать другим людям о том, что вы делаете, предоставить им возможность оставить обратную связь, а также сделать так, чтобы они начали думать о вашей работе.

*****

Вы должны вносить вклад в работу всей команды, а не только в свою собственную. Как и в случае с ревью кода, будучи новым сотрудником и участвуя в разработке проекта, вы можете чувствовать себя неловко:
вам может казаться, что вы не в состоянии чем-либо помочь старшим разработчикам с их проектом. Чтение ревью проекта и участие в моз-говых штурмах может отвлекать, однако все равно уделяйте немного времени этим делам. Ваше участие улучшит проект, создаваемый ко-мандой, а вы научитесь чему-то новому.

*****

Не всегда получается избавиться от сложности, однако у вас есть воз-можность выбрать место, где она будет сконцентрирована. Совместимые с предыдущими версиями изменения (их мы обсудим позже) могут упростить использование кода, но способны отрицательно повлиять на его написание. Уровни косвенных обращений для снижения связанности подсистем уменьшают зависимость, но повышают неясность. Хорошо подумайте о том, когда, где и как управлять сложностью.

*****

Сталкиваясь с неизвестностью будущих требований, инженеры чаще всего выбирают один из двух подходов: или пытаются понять, что от них может потребоваться, или создают абстракции, которые облегчат будущее изменение кода. Не надо играть в подобные игры: оба подхода приведут к увеличению сложности. Будьте проще. Кстати, этот принцип известен как KISS — Keep It Simple, Stupid (делай проще, тупица) — бла-годаря любви ВМС США к акронимам. Воспользуйтесь принципом KISS, чтобы не забывать о простоте. Вы всегда можете усложнить про-стой код позже,

*****

Преждевременная оптимизация возникает в тот момент, когда разра-ботчик добавляет в код оптимизацию, но необходимость ее добавления при этом не доказана. Классический сценарий выглядит так: разработ-чик видит область кода, которую можно сделать быстрой или более масштабируемой благодаря добавлению сложной логики или таких архитектурных уровней, как кэши, сегментированные базы данных или очереди. Разработчик оптимизирует код перед доставкой клиентам, до того как кто-нибудь начнет им пользоваться. После отправки разработ-чик понимает, что оптимизация была не нужна. Однако оптимизация уже не удаляется, а сложность кода только увеличивается. Многие улучшения производительности кода требуют повышения сложности.
К примеру, кэш будет работать очень быстро, но окажется несовмести-мым с базовыми данными.

*****

Принцип наименьшего удивления очень понятный: не удивляйте пользо-вателей. Создавайте функции, поведение которых совпадает с ожида-ниями пользователей. Функции с высокой кривой обучения или стран-ным поведением разочаровывают пользователей. Не стоит удивлять и разработчиков: необычный код трудно понять, из-за чего возникают сложности. Вы можете сохранить особенность своего кода, но исполь-зуйте при этом стандартные паттерны и библиотеки и не используйте неявные знания.

*****

Инкапсулированные функциональные области всегда устремляются к высокой связности и слабой связанности — желаемым характеристи-кам. ПО с высокой связностью и слабой связанностью легче развивать, так как изменения имеют небольшой радиус действия. Связность кода считается высокой тогда, когда взаимосвязанные методы, классы и пере-менные находятся рядом друг с другом в модулях или пакетах. Код со слабой связанностью — самодостаточный: при изменении его логики не нужно изменять другие программные компоненты.

*****

Разработчики часто рассматривают ПО с точки зрения уровней: фронт-енд, средний уровень и бэкенд. Многоуровневый код сгруппирован в соответствии с технической областью, при этом весь код пользователь-ского интерфейса находится в одном месте, а все сохраняемые объекты — в другом. Группировка кода согласно техническим областям подходит при работе в пределах одной бизнес-области, однако при расширении бизнес-областей данный метод становится бесполезным. Вокруг каждого из уровней собираются отдельные команды, и затраты на координацию увеличиваются, так как любое изменение бизнес-логики отражается на всех уровнях. При использовании горизонтальных уровней общего доступа очень легко смешать бизнес-логику разных функциональных областей и тем самым усложнить код.

*****

Поддержание совместимости изменений позволяет версиям клиента и сервера развиваться независимо друг от друга. Существуют две формы совместимости: прямая и обратная.
Благодаря изменениям с прямой совместимостью клиенты могут ис-пользовать новую версию API вместе со старой версией сервиса. Веб-сервис, работающий с API версии 1.0, но способный принимать вызовы от клиента, работающего с API версии 1.1, будет иметь прямую совме-стимость.
Изменения с обратной совместимостью прямо противоположны: новым версиям библиотек или сервисов не требуется обновленный клиентский код. Изменение является обратно совместимым, если код, который использовался для версии API 1.0, будет компилироваться или выпол-няться для версии 1.1.

*****

на-пример добавление индекса или удаление столбца, может привести к остановке работы всей базы данных или приложения. Управление изменениями базы данных путем выполнения команд языка описания структур данных (database description language, DDL) в самой базе данных может привести к ошибкам. Схемы базы данных в разных средах различаются, а их состояние остается неопределенным: в таком случае неизвестно, что, когда и кем было изменено, как и неизвестно влияние этих действий на производительность. Сочетание изменений, подвер-женных ошибкам, и вероятности потратить время впустую представляет собой взрывную смесь.

*****

Не нужно связывать жизненные циклы приложения и базы данных.
Привязанность миграции схемы к развертыванию приложения может привести к неожиданным последствиям. Изменения схемы чувстви-тельны и могут иметь серьезные последствия для производительно-сти. Разделение миграции базы данных и развертывания приложения позволяет контролировать то, когда именно внедряются изменения схемы.

*****

К примеру, откат удаления столбца приведет к восстановлению столбца, но дан-ные столбца при этом не восстановятся! Намного полезнее проводить резервное копирование таблицы перед ее удалением.

*****

Больше всего Канбан подходит для команд, которые занимаются не длительными масштабными проектами, а обработкой входящих запросов — например, для групп инженеров службы поддержки или SRE-инженеров.

*****

Концепция гибкой разработки не одобряет оценки, основанные на вре-мени. Специалисты-практики утверждают, что при встречах создается эмоциональная привязанность и они не представляются чем-то сложным.
Иные варианты оценок помогают упростить выражение неопределен-ности. Может показаться, что для изменения одного метода требуется небольшой объем работы, но если этот метод невероятно сложен, то Скрам 263 времени и сил

*****

Однако строгое соблюдение практики планирования спринта встре-чается нечасто. Большинство команд тщательно выбирают, что им делать: некоторые выполняют предварительную работу на совещании по планированию спринта, а у других команд нет продакт-менедже-ра и распределение работы ложится на плечи самих разработчиков.
Стендапы 265 Многие команды не задействуют пользовательские истории, а выби-рают задачи или сообщения об ошибках в более открытом формате.
Не думайте, что у всех команд процесс планирования спринта проходит одинаково.

*****

Из большинства книг по гибкой разработке вы не узнаете ничего нового.
В них во всех подробностях рассматриваются сам подход и множество его вариантов. Книги больше подходят для руководителей проектов, а вам мы советуем изучать онлайн-ресурсы.

*****

следят за отношениями внутри коллектива. Планируют и координируют разработку продуктов. Они также могут участвовать в технической части разработки ПО — в про-ведении ревью кода или создании архитектуры кода, — однако хорошие менеджеры редко сами пишут код. Они следят за эффективностью всей команды. То есть они управляют всем, работая на разных уровнях:
на верхнем — с вышестоящим начальством, на среднем — с другими менеджерами и на нижнем — со своей командой.

*****

Менеджеры управляют своей командой и отслеживают прогресс теку-щих проектов, устанавливают цели и предоставляют обратную связь, обеспечивают прозрачность приоритетов, нанимают и увольняют ра-ботников, а также поддерживают командный дух.

*****

Менеджеры создают процессы, которые обеспечивают постоянную работу команд и отдельных разработчиков. В главе 12 мы подробно рассмотрели структуру процессов гибкой разработки, ориентированную на командную работу.

*****

Что можно было бы улучшить? Что вы думаете о процессе планирования работы команды? С какой самой большой технической проблемой вы сталкиваетесь? Что бы вы хотели сделать из того, что не можете сделать сейчас? Какая у вас самая большая про-блема? Какая, на ваш взгляд, самая большая проблема у компании?
С какими препятствиями сталкиваетесь вы и ваши коллеги?

*****

Встречи 1:1 помогают добиться взаимопонимания. Совершенно нор-мально немного поговорить на отвлеченные темы — например, о вашей кошке, о любви менеджера к ярким кроссовкам или погоде. Вы работаете над выстраиванием отношений, которые намного глубже, чем просто обмен готового кода на зарплату. Тем не менее, хотя разговоры на отвле-ченные и личные темы важны, однако не позволяйте всем встречам 1:1 превращаться в дружеские посиделки.
Если вам не назначили встречу 1:1, узнайте, проводятся ли они в прин-ципе. Практика таких встреч общепринятая, но не все ее придер-живаются. Уточните у менеджера, как ему будет удобнее проводить встречи. Некоторые менеджеры предпочитают встречи 1:1 по «лени-вому» принципу: время назначает другое лицо, а не они. Если встреча не запланирована, то менеджеры считают, что тем для обсуждения нет.
Однако б льшую часть времени темы для разговоров будут браться из того длинного списка, который мы предложили ранее.

*****

Если менеджер постоянно отменяет встречи, обязательно поговорите с ним об этом. Управление командой — это часть работы менеджера, а часть управления — это общение с ее участниками. Оправдания, что «у меня нет времени», недостаточно. Если менеджер не может найти время для встречи, проблему нужно решать. Сообщения о повторных отменах встреч могут быть важным сигналом для менеджера. Разговор не должен сводиться к конфронтации: это обратная связь, в которой нуждается ваш менеджер.

*****

Через год Дмитрий обнаружил, что, будучи с командой в дружеских отношениях, он забыл о проведении регулярных встреч с одним из своих подчиненных. Он бы и не узнал об этом, если бы работодатель не сообщил, что данный инженер хочет перейти в другую команду.
Среди причин такого решения было то, что подчиненному хотелось работать с менеджером, который участвовал бы в развитии его карье-ры. Дружеские отношения не являются заменой встреч 1:1. Менеджер, слишком занятый для проведения 1:1, может быть слишком занят и для того, чтобы быть менеджером!

*****

Стратегия OKR — это управленческий метод, с помощью которого ком-пании определяют цели и оценивают их возможный успех. В стратегии OKR компании, команды и отдельные лица определяют цели, а также привязывают ключевые результаты к каждой из этих целей. Отдельная цель может иметь от трех до пяти ключевых результатов, которые явля-ются показателями прогресса в достижении цели.

*****

Не превращайте перечисление ключевых результатов в список дел.
Ключевые результаты должны объяснять не то, как что-то сделать, а то, как вы узнаете, когда что-то будет сделано. Существует множество способов достижения цели, и список OKR не должен вас ограничивать.
Иногда ситуацию легче всего проиллюстрировать простым примером из жизни: если ваша цель — это успеть на празднование дня рождения бабушки, то ключевым результатом будет «быть в Лос-Анджелесе к 20-му числу», а не «поехать по трассе I-5 19-го числа». Поездка на ма-шине или

*****

Данная философия подразумевает, что вы не обязаны полностью выполнять все цели из OKR, иначе это было бы знаком того, что вы мало к чему стремитесь. Большинство OKR выполняются на 60—80 %, что означает достижение только 60—80 % всех целей. Если вы Глава 13. Взаимодействие с менеджментом280 выполняете более 80 % всех целей, то вы не целеустремленный человек.
Выполнение меньше 60 % целей означает, что вы боитесь не оправдать ожиданий или недостаточно реалистичны. Но почему бы не устано-вить OKR на уровне 100 % и не вознаграждать за перевыполнение?
При большом количестве амбициозных целей вы вольны выбирать, от каких из них можно отказаться в середине квартала, в то время как при выполнении OKR на 100 % вы обязаны выполнить все. Узнайте, какого принципа придерживаются в вашей компании: рассматривают OKR как обязательные к выполнению цели или как амбициозные с некоторым ожидаемым уровнем неудач.

*****

Не забывайте о проектах, не связанных с кодом. Программы наставни-чества, ревью кода, проведение интервью, написание постов в блогах, проведение презентаций или ведение документации — вещи, которые не должны остаться незамеченными. Вспомните все, что происходило, для написания честной самооценки.

*****

Менеджеры должны давать обратную связь в течение всего года — во время встреч 1:1, отдельно после встреч или в чате. Если вы получаете недостаточно обратной связи, обсудите этот вопрос с менеджером на следующей встрече 1:1. Вы также можете обратиться к своим настав-никам или старшим инженерам.

*****

Для получения обратной связи воспользуйтесь встречами 1:1. Заранее вышлите заготовленные вопросы, чтобы менеджеру не пришлось импро-визировать на ходу. Просите конкретных ответов. Вопрос: «Что я могу сделать, чтобы улучшить процесс тестирования?» — звучит лучше, чем:
«Что я могу делать лучше?» При составлении вопросов не ограничи-вайтесь технической частью. Попросите включить в обратную связь информацию о коммуникации, карьерном росте, лидерстве, возможно-стях приобретения новых умений и т. д. Воспользуйтесь подсказками из раздела встреч 1:1, если вам требуется определить цели.

*****

Не доверяйте обратной связи полностью. Ваш менеджер предоста-вит всего лишь одну точку зрения (хотя и важную). Постарайтесь Концепция управления вверх 283 посмотреть на обратную связь от менеджера своими глазами. Спросите себя, что менеджер упустил при составлении обратной связи, насколько его отзывы совпадают с вашим ощущением, что знает ваш менеджер, чего не знаете вы, и т. д.

*****

Сообщите также, если обратная связь не привела к желаемому результа-ту: «Я присоединился к рекомендованной вами группе инженеров, и, по правде говоря, мне это никак не помогло. Они обсуждают документы и проекты, никак не связанные с моей работой. Не предложите ли вы варианты других команд?»

*****

Хорошие менеджеры хотят получать обратную связь от всей команды.
Менеджеры должны знать, как идут дела: в чем команда преуспевает, а где имеются проблемы. У каждого члена команды есть своя точка зрения. Обратная связь устраняет «слепые зоны».

*****

При предоставлении обратной связи используйте модель «Ситуация — Поведение — Влияние» (SBI). Сначала опишите ситуацию, после чего опишите поведение в конкретной ситуации, которое вы считаете достой-ным похвалы или проблемным. Затем объясните воздействие, то есть в чем выражается эффект этого поведения и почему оно важно. Пример:
Ситуация. В январе я закончил изменение кода в новом сервисе раз­ решений и отдал его команде использования ПО для развертывания.
Однако сервис разрешений до сих пор не развернут, а сейчас уже на­ чало марта.
Поведение. В течение пяти недель ожидаемая дата релиза на панели «Предстоящие релизы» менялась каждую неделю. Обновление базы данных тоже переносилось в течение нескольких недель.
Влияние. Мы рискуем не уложиться в сроки, из­за чего задержится работа над рядом зависимых проектов. Возможно ли что­то сделать?
Модель SBI исключает обратную связь, основанную на характере чело-века, а также на предположениях о его мотивах и намерениях. Данная модель фокусируется на фактах и взаимодействии сторон и помогает избегать конфликтных ситуаций при обсуждениях.

*****

Модель SBI применяется и для положительной обратной связи.
Ситуация. На прошлой неделе нам нужно было написать проектный документ для предлагаемых изменений при регистрации, так что я воспользовался возможностью и применил созданный вами шаблон проектного документа.
Поведение. Раздел, посвященный планам развертывания и коммуни­ кации, помог нам понять, что мы забыли проинформировать команду службы поддержки пользователей о внесенных изменениях.
Влияние. Как только мы обратились к членам этой команды, мы получили много полезной обратной связи! Написание документа далось легче и быстрее, так как нам не нужно было думать над его структурой. Спасибо за помощь!

*****

Не ограничивайте себя разработкой ПО. Например, вас может заинтересовать продакт-менеджмент или Глава 13. Взаимодействие с менеджментом286 появится желание создать собственную компанию. Думайте масштаб-но и с прицелом на далекую перспективу. Вот пример для разговора с менеджером:
Можем ли мы сегодня поговорить о карьерном росте? По правде говоря, я не знаю, где я вижу себя через пять лет. Какие карьерные пути вы видите? Чем они отличаются? Мне нравится проект, над которым я сейчас работаю, но меня также интересует безопасность.
Будет ли у меня возможность поработать над чем­то связанным с безопасностью?

*****

После обсуждения всех целей наберитесь терпения. У вас много воз-можностей, и, в конце концов, вы должны максимально ими восполь-зоваться. Поймите, что существуют различные формы возможностей:
участие в новых проектах, решение новых задач, участие в программе наставничества, создание презентаций, написание постов в блогах, обу-чение или участие в партнерских командах. В определенном смысле все, что вы делаете, — это возможность для роста.

*****

Если ничего не меняется, вам стоит задуматься о смене менеджера, команды или даже об увольнении. Перевод из одного отдела в другой внутри компании тоже возможен, если вам нравятся ваши коллеги или компания, в которой вы работаете. Выбор новой компании стоит Глава 13. Взаимодействие с менеджментом288 рассматривать, если проблемы в месте вашей нынешней работы носят системный характер и вы постоянно сталкиваетесь с такими проблема-ми, как плохой менеджмент, руководство или токсичная среда. При сме-не команды действуйте деликатно: сначала поговорите с менеджером, к которому хотите перейти, а затем со своим нынешним менеджером.
Переход из одной команды в другую может занять некоторое время, так как вы должны передать свои дела, однако не позволяйте данному процессу затягиваться на срок больше трех месяцев.

*****

Когда доходит до разговоров о повышении, время начинает играть здесь большую роль. Начните обсуждать свое повышение задолго до того, как вам покажется, что вы готовы к повышению, — заводите разговор, находясь еще на половине пути. В таком случае и у вас, и у вашего ме-неджера будет время на согласование и заполнение пробелов. Если вы ждете момента, когда точно будете считать себя готовыми к повышению, Участвуйте в программах для инженеров 297 а ваш менеджер с этим не согласится, то весь разговор сведется к раз-решению конфликта, а не к разработке плана.

*****

Наконец, помните, что карьерные лестницы отражают общие шаблоны, которым не все могут соответствовать. Работа технического руково-дителя требует широкого влияния и выполнения задач разряда glue work (координации, улучшения процессов, создания документации, коммуникации и т. д.). Для сеньора-разработчика или ниже требования чаще всего описываются в терминах исключительно способности про-граммировать. Это является проблемой для джуниоров, берущихся за выполнение важной работы, которая не связана с программированием и к которой не прикреплен коммит в Git. Такие инженеры уделяют про-граммированию очень мало времени, поэтому их редко продвигают по службе или переводят на другую должность, к примеру продакт-ме-неджера. В выступлении и докладе Тани Рейли (Tanya Reilly) (https:// noidea.dog/glue/) говорится о том, что вам стоит прекратить занимать-ся работой, относящейся к разряду glue work, даже во вред команде в краткосрочной перспективе, если менеджер не рассматривает вашу работу как шанс получить повышение. Это горькая пилюля, и такое отношение может показаться вам несправедливым, однако все решения принимает менеджер, а не вы.
