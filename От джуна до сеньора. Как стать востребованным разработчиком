Ot dzhuna do sien'ora. Kak stat - Vladimir Shviets

Проверьте код вашего проекта и найдите места, в которых происходят очень похожие действия. Оцените аналитически, действительно ли эти места похожи и  как  бы они выглядели, если  бы вы решили выделить этот код в отдельную сущность. Не торопитесь с рефакторингом этих мест. Достаточно того, что вы научитесь видеть, как  именно выглядит дублирующийся код.
Вместе с  этим придет и  интуитивное понимание, когда код стоит просто копировать, а  когда он достоин того, чтобы иметь свой собственный угол в проекте.

*****

Даже в похожих решениях найдутся требования, которые заставят вас искать новые подходы. Подходы, не позволяющие вам обрастать багажом уже написанного кода, который вы будете просто копировать в каждый новый проект.
Любая задача требует качественного решения, однако чаще всего на этапе декомпозиции вы увидите, что получившиеся мелкие части этой задачи представляют собой типовые про-блемы, решения для которых вы писали уже много раз. Чем опытнее вы будете становиться, тем больше подобных типовых решений будете замечать и тем легче вам будет разделять задачу на составные части.
При работе над задачей вы всегда будете стоять перед выбором: либо написать код само-стоятельно, либо применить уже написанное, готовое решение. Если у вас недостаточно опыта для решения такой задачи, используйте готовое, проверенное решение. При желании вы всегда сможете сделать рефакторинг и заменить его своим. Ваши приоритеты – стабильность и про-стота поддержки кода, который вы производите. Не забывайте об этом.
Если вам нужно отсортировать данные, пожалуйста, не пишите

*****

Если у вас возникнет мысль, что использовать чужие решения недостойно настоящего самура… разработчика, выкиньте эту мысль на помойку. У вас ограниченный ресурс времени и сил, и вы физически не сможете написать каждое решение, которое будет необходимо. Дове-ряйте сообществу, доверяйте проверенным решениям. На протяжении карьеры у вас сложится достаточно ситуаций, когда нужно будет написать решение, которого пока просто не суще-ствует. Если вы все еще чувствуете неудовлетворенность, используя сторонний код, сделайте свой собственный вариант в нерабочее время. Это подарит вам новый опыт и позволит лучше понять, что именно вы использовали и как оно работает.

*****

Труд разработчика подобен сборке конструктора Lego, где блоки – типовые решения.
■ Предпочитайте готовые и проверенные решения.
■  Когда готового решения нет, консультируйтесь с  сообществом и пишите свое.

*****

На сложных проектах вы, вероятно, будете работать с консультантами – эти люди, разби-рающиеся в предметной области проекта, будут составлять для вас рабочие требования. Любое белое пятно должно обсуждаться с консультантами – это убережет вас от гадания на кофейной гуще и досадных ошибок, которые вы можете допустить, если не учтете какое-нибудь простое правило (допустим, вы все же решили не становиться бухгалтером и потому не учли процент подоходного

*****

Особенность почти каждого программного продукта в том, что он постоянно развивается.
Меняются требования, разработчики, логика его работы. Если провести аналогию, в начале проекта вас просят сделать стул, а через год вокруг этого стула вырастает целый дом. Код вашего проекта постоянно изменяется, а значит, накапливает массу проблем. Это может быть что-то незначительное, вроде неоднородности стиля кода или отсутствия внутренней докумен-тации, но чаще всего проект обрастает неоптимальным, а иногда и устаревшим кодом. И тогда наступает время рефакторинга.

*****

Рефакторинг необходимо проводить регулярно, однако, как показывает практика, заказ-чики или менеджеры не всегда понимают его важность и часто предпочитают ему реализа-цию какой-то новой функции, нужной клиентам. Их приоритеты понятны, но и вам не стоит забывать о своих. Ваша задача – писать качественный код и нести за него ответственность.
Вы вряд ли сможете доходчиво объяснить необходимость обязательного рефакторинга (если на  проекте его проведение обязательно, напишите мне, где вы работаете,  – я немедленно отправлю свое резюме). Вы можете заранее закладывать дополнительное время на задачи, свя-занные с изменением кода. Возможно, это выглядит как попытка схитрить, при этом даже не ради собственной выгоды, но ваш профессионализм того стоит.

*****

Золотое правило «работает – не трогай» звучит забавно, но за ним скрыты многие часы внеурочной работы и стресса разработчиков, системных администрато-ров, проджект-менеджеров и тестировщиков. Вам, как профессионалу, важно поддерживать проект в рабочем состоянии, даже если он слегка устарел или не использует самых новых инструментов.

*****

Тезисы ■ Читайте и анализируйте код нового проекта.
■ Используйте время ознакомления с новым проектом по максимуму.
■ Спрашивайте, спрашивайте и спрашивайте.
■  Не  бойтесь допускать ошибки; разработчиков, которые приходят на  новый проект и  моментально пишут идеально подходящий код, не существует.

*****

Тезисы ■ Пишите код как документацию.
■ Документируйте емким текстом.
■ Иногда код не может быть простым – документируйте!

*****

Я не знаю, с чем был связан этот разгул немотивированной агрессии по  отношению к  новому человеку в  команде, но в тот момент ситуация расстроила меня настолько, что я, на тот момент уже будучи lead-разработчиком, попросил друга предоставить мне слово на код-ревью. Я высказал все, что думаю о  таком отношении внутри команды и о самой политике компании, которая это поощряет, после чего искренне посоветовал другу сменить место работы. Порой есть смысл тратить время и силы, чтобы попробовать изменить положение к лучшему, но эта ситуация была из разряда «собирай вещи и беги».

*****

Старайтесь разделять любовь к знаниям и профессиональные навыки. Поверьте мне:
даже в рамках несколько наскучившего вам проекта есть масса вещей, которые вы можете улуч-шить, не применяя десяток новых технологий. Не поддавайтесь желанию испробовать каждую технологию, которую знаете, на своем рабочем проекте.

*****

Опасность использования паттернов проектирования кроется именно в их универсальности и абстрактности по отноше-нию к проблеме. Как говорится, если у вас в руках молоток, все начинает напоминать гвозди.
Начинающие разработчики частенько влюбляются в паттерны проектирования

*****

Паттерны проектирования – благо и проклятие.
■ Не используйте паттерны проектирования для решения всех на свете проблем.
■  Подходите к  выбору решения прагматично, хладнокровно и осознанно.

*****

Если вы чувствуете непреодолимую жажду сотворить нечто невероятно сложное из всех кон-струкций языка, до которых сможете дотянуться, – создайте свой самый запутанный и понят-ный только вам pet project, он точно вас не разочарует.

*****

Оптимизация возможна почти для любого написанного кода, но в большинстве случаев она нужна только в конкретных местах проекта.

*****

Разные области разработки программного обеспечения требуют разной степени опти-мизации. Есть определенный баланс: оптимизируя код, вы часто жертвуете стройностью его логики, красотой реализации, удобством архитектуры или частью функций системы.
Из этого следует первое правило: никогда не начинайте оптимизацию до того, как код будет удовлетворять всем требованиям проекта. Дональд Кнут (пожалуйста, прочитайте про этого прекрасного человека) сформулировал это правило так: «Преждевременная опти-мизация – корень всех зол»3 – и был, несомненно, прав. В вопросах оптимизации необходимо идти от обратного: не от отсутствия кода к его появлению, а от существующего кода к его упрощению и ускорению.
Второе правило оптимизации: убедитесь в том, что вы оптимизируете нужный код.
Прежде чем приступать к любой оптимизации, следует как минимум сделать профи-лирование кода. Необходимо знать все медленные места проекта, все бутылочные горлышки (bottlenecks, да, ознакомьтесь с этим). Чем больше вы получите

*****

а.
Оптимизация часто приводит код к менее логичному виду, иногда усложняет его, ино-гда чрезмерно упрощает, лишая его абстракций, элегантных решений. Это нормально: задача 3 "Structured Programming with go to Statements," Computing Surveys (Vol. 6, № 4, декабрь 1974, с. 268).
В.  Швец.  «От джуна до сеньора. Как стать востребованным разработчиком» 48

*****

ет – работа над кодом.
Если вы понимаете, что излишняя коммуникация только вредит вашей работе, обсу-дите это с менеджером или старшими разработчиками. Скорее всего, вы сумеете договориться о возможности избегать непродуктивного общения, чтобы сосредоточиться на работе.

*****

В некоторых случаях критику будут оправдывать тем, что это «жесткая любовь»: дескать, вас заставляют работать на износ, критикуя практически каждый шаг, чтобы сделать из вас «настоящего спартанца». Никогда не верьте в это. Любая компания, практикующая такое, – не ваша компания (бегите, срочно бегите!). В таком месте вы не сможете развиваться как про-фессионал. Все, что вы получите, – невроз и комплекс неполноценности.
Тезисы ■

*****

Как и в любых вопросах общения, старайтесь соблюдать здоровый баланс: последова-тельно отстаивайте свою позицию, подавляя желание сделать «розочку» из бутылки и начать угрожать коллегам. А если говорить серьезно, не позволяйте обесценивать ваш труд. Вы вло-жили в свой код время, силы, личный опыт; вы уверены в его качестве. Не стоит все это преда-вать. В спорной ситуации будьте настойчивы, используйте объективные данные: цифры, срав-нения, ссылки на статьи и лучшие практики.

*****

За  годы работы меня бросало из  крайности в  крайность. Вначале я не умел и не считал нужным отстаивать свой код, а став профессионалом, не принимал ровным счетом никакой критики. Мне стало легче, когда я понял, что не  отделяю себя лично от  работы, которую выполняю. Любая критика или  комментарий к  коду воспринимались как  личный упрек, как  личное оскорбление. В моем случае это была плата за полноту, с которой я отдавался профессии. И по сей день мне приходится напоминать себе, что я – это я, а не моя работа. Это помогает.

*****

Реальность такова, что компании нет никакого смысла платить вам больше, если вы выполняете свою работу за те деньги, которые уже получаете.
Ведите учет своих успешных проектов и профессиональных достижений. Этот список будет важным аргументом при обсуждении оплаты труда на собеседовании или при повыше-нии на текущем месте работы. Вы требуете больше денег не просто потому, что так хотите, а предоставляете объективные аргументы в пользу того, что ваш труд ценен.

*****

Я никогда не  любил интервью и  собеседования. Мне не  нравились вопросы, задания, я никогда не  мог вспомнить нужную сортировку и  особенности ее реализации в  нужный момент. Я не  любил конкретные вопросы о том, что я «должен» помнить наизусть, это напоминало мне скучное заучивание, без  вариативности и  возможности придумать что-то на  ходу.
Стоит  ли говорить, что с  таким подходом я редко оказывался желанным кандидатом для самых разных компаний. Но был и плюс: благодаря такому отношению я попадал в  другие компании, которые так  же не  принимали формализма в найме разработчиков, отдавая предпочтение их практическим навыкам. Моя нелюбовь к формальным собеседованиям привела меня к тому, что уже находясь по  другую сторону стола я с  куда большим пониманием и  симпатией отношусь к  разработчику, который хочет получить работу, и не пытаюсь выдавить

*****

В начале карьеры у вас будет еще недостаточно опыта, чтобы с уверенностью сказать, насколько хорошо руководитель разбирается в вашей работе. К тому же многие из них умеют идеально маскировать свое незнание. Моя рекомендация по поводу авторитарных начальни-ков, в знаниях которых вы сомневаетесь, проста: не работайте с такими людьми. Да, возможно, это будет стоить вам места, но поверьте мне: если вы цените свои нервы, рабочую мотивацию и хорошее настроение, избегайте подобных людей. Они никогда не признают ваших заслуг, будут критиковать вашу работу, ничего не понимая в ней, и даже вставлять палки в колеса, если вдруг у них появится такое желание. Уважайте себя, цените свой труд и ментальное здоровье.
В нашей

*****

Поиск виноватых и  охота на ведьм – дерьмо, которое никогда и никому не помогало. Если после сбоя продукта весь менеджерский состав и старшие разработчики заняты поиском того, кто допустил эту ужас-ную ошибку, чтобы покарать негодяя, я бы предложил вам серьезно задуматься о смене места работы.
Ошибки – это постоянный побочный эффект нашей работы. От них никуда не деться, их не избежать. Все, что вы можете сделать как профессионал, – постараться минимизировать их последствия. Именно поэтому найти и покарать виновного – самое глупое, что можно сделать, когда ошибка уже произошла.

*****

Кризисы раскрывают все самое неприятное в людях, поэтому постарайтесь даже в очень сложных ситуациях оставаться профессионалом: не поддавайтесь эмоциям и панике. Полагай-тесь на факты и свое понимание ситуации. Что вы реально способны предложить или сделать, чтобы минимизировать урон от сбоя вашего продукта? Как вы можете помочь своим пользо-вателям и клиентам?

*****

поддавайтесь общей панике, работайте в обычном режиме – просто ищите решение.
И, разумеется, необходимо упомянуть случай, когда именно ваш код стал причиной такого крупного и  громкого сбоя (ха-ха, смотрите, я нашел виноватого!). Если серьезно, не берите в голову. Делайте то, что вы бы сделали, найдя у себя ошибку при более спокойных обстоятельствах. Сделайте выводы, разберитесь, почему все пошло не так, извлеките пользу из этого происшествия.

*****

Не позволяйте даже самым катастрофическим ошибкам ставить крест на всей вашей работе. Нельзя достичь профессиональных высот, ни разу не сорвавшись вниз. Опыт крупных ошибок и падений будет для вас одним из самых ценных.

*****

Я не буду ходить вокруг да около и скажу сразу: холивары – для людей, у которых слиш-ком много свободного времени. Либо для тех, кто выбрал себе не ту профессию. Возможно, этим людям стоило бы попробовать себя в политике или телемаркетинге, кто знает. Я искренне советую вам не начинать холиваров и не участвовать в них.
Каждый опытный разработчик знает, что нет плохих или  хороших технологий. Они бывают только живыми или мертвыми. Либо технология используется – и, значит, она жива, либо не используется – и уже мертва.

*****

Прелесть несостоятельных технологий в том, что время решит все за них. Равно как и в эволюции: характеристики, которые не сра-ботали, перестанут воспроизводиться, а те, что оказались полезными, дадут начало новым.
Если у  вас уже есть опыт работы с  несколькими языками программирования (и  вы использовали их не только в своих pet projects), то вы представляете, о чем я говорю. Такое многообразие языков существует не просто так. Каждый из них занимал какую-то нишу, каж-дый пытался наследовать лучшее от предшественников и избавиться от их ошибок. Старался следовать за новыми технологиями, упрощал жизнь разработчиков и пользователей. И нет, это не делает старые технологии плохими или непригодными (давайте, расскажите С, что он мертв).

*****

Любая технология существует не просто так. Любая технология пытается решить некие проблемы, которые уже назрели, но, возможно, не так очевидны со стороны. Относитесь к ним с  уважением, старайтесь понять, какую именно проблему пытались решить авторы, какие новые подходы для этого использовали.
Тезисы ■ Холивары – для людей, которым нечем заняться.
■ Все технологии нужны.
■ Придерживайтесь своего мнения, но не пытайтесь никого переубедить.
■ Собирайте знания, не воюйте с технологиями, абсорбируйте их.
В.  Швец.  «От джуна до сеньора. Как стать востребованным разработчиком» 69

*****

Тезисы ■ Перед оценкой выясните все требования к задаче.
■ Дробите большие задачи на более мелкие.
■ Учитывайте потенциальные риски; запоминайте, когда вы ошибались в оценке.
■ Добавляйте время на тестирование.
■ ОБЯЗАТЕЛЬНО добавляйте время на тестирование!
■ Учитывайте время на «потрындеть», оно такое же реальное.
■  Добавляйте коэффициенты оценки, не  пренебрегайте своей безопасностью.
■  Низкие оценки никого не  впечатлят, а  вам придется ночевать на работе.

*****

Каждый проект – это совокупность больших и маленьких решений.
■  Человек, не  обладающий достаточным опытом принятия решений, так же плох для проекта, как и отсутствие человека, принимающего решения.
■  Если решения принимаете вы, будьте готовы столкнуться с сопротивлением.

*****

Молча смотреть, как продукт, в который ты вкладываешь так много себя, страдает и теряет аудиторию – болезненный опыт, повторения которого я бы не хотел.

*****

сожалению, соблюдение баланса в обсуждении задач и рабочих процессов – дело очень-очень непростое. И чем больше людей вовлечено в обсуждение, тем сложнее оно становится. А если в команде нет человека, который может принять окончательное решение, процесс становится бесконечным.
Поверхностное или слишком сжатое обсуждение в рабочем процессе грозит тем,

*****

Бюрократия – неотъемлемая часть больших компаний и продуктов.
■  Редкие плюсы бюрократии теряются среди ее многочисленных минусов.
■  Не  позволяйте сухим бюрократическим формальностям расстраивать вас.

*****

Мир – это хаос. Мир программного обеспечения, при всей кажущейся структурированности и логичности, – еще больший хаос.
И мы становимся заложниками желания привнести в этот хаос смысл и логику. Мы пытаемся написать идеальный код. Дизайнеры пытаются создать идеальный, понятный и практичный интерфейс. Тестировщики пытаются написать идеальные системы проверки продукта.
И все это разбивается о пользователя, который решил отправить

*****

Эта кажущаяся небрежность – не более чем показатель большого опыта, полученного на множестве проектов. Каждый разработчик, приобретя достаточный опыт в IT, начинает понимать, что идеального кода не существует. Есть код, который работает и делает то, что дол-жен делать. С одной стороны, профессиональный разработчик должен писать качественный код, с другой – может быть достаточно небрежен в работе. Но как?! Опыт и интуиция. Если за свою карьеру вы написали 10 калькуляторов, то вряд ли станете писать сотню юнит-тестов по проверке сложения (assert(2 + 2, 4), какая красота, вы только посмотрите). Вероятнее всего, вы напишете десяток тестов, но таких, которые будут включать самые нелепые, самые глупые входные данные, какие

*****

Тезисы ■ Мир программного обеспечения – хаос.
■  Старайтесь выполнять свою работу качественно, но  не  кладите ее на алтарь перфекционизма.
■ Идеальных решений, как и идеального кода, не существует.

*****

Ощущаю  ли  я, начиная новый проект, что хочу создать идеальный продукт? Разумеется, да. Просто теперь «идеальный» для меня звучит как «надежный», «удобный для пользователей», «расширяемый» и  «продуманный». На  такие идеальные качества я вполне могу ориентироваться без  того, чтобы усложнять бесконечным перфекционизмом и без того сложную работу.

*****

Тезисы ■ В ходе код-ревью не обороняйтесь и не нападайте, это не битва.
■ Уделите время код-ревью.
■  Абстрагируйтесь от  кода и  стиля, сосредоточившись на  логике написанного.
■  Воспринимайте рекомендации как  добрый совет, не  ищите в  них упрека.
Задание Попробуйте найти в системе контроля версий вашего проекта задачу, которую вы делали какое-то время назад и уже успели забыть. Возьмите ее на ревью. Оцените свежим взглядом собственные решения, выбор механизмов и  подходов. Проверьте, соответствует  ли ваш код архитектуре проекта.
Достаточно ли много общего он имеет с похожими компонентами в системе?
Какие рекомендации по его улучшению вы бы дали, руководствуясь своими знаниями на сегодняшний день?
История из жизни Как-то раз я проводил код-ревью начинающего разработчика и  делал это по  большей части автоматически  – комментировал, писал, почему так не  стоит делать и  как  сделать лучше; словом, это было самое обычное ревью, по крайней мере для меня. Через некоторое время мне передали, что разработчик, чей код я проверял, работает через силу, подавлен, сомневается даже в  простых решениях, которые пишет. Я решил поговорить с  ним, узнать, что случилось, нет ли каких-то личных причин, которые он хотел бы обсудить. Выяснилось, что мое код-ревью было обычным только для меня, а разработчик воспринял его как отповедь, как прямую критику в свой адрес. Я извинился и попытался объяснить, что ничего из того, что я говорил, не может и не должно восприниматься как упрек или сомнения в его профессионализме:
это всего лишь комментарии, которые должны подготовить код к тому, чтобы он стал частью проекта. Мы хорошо поговорили в тот день и достаточно долго поддерживали дружеские отношения, иногда вспоминая эту историю.

*****

Тезисы ■  Методология разработки  – попытка структурировать и  повысить производительность разработки программного обеспечения.
В.  Швец.  «От джуна до сеньора. Как стать востребованным разработчиком» 86 ■  Чаще всего методологии создавались для  конкретных компаний и с определенными целями.
■ Верная методология в любой компании определяется методом проб и ошибок.
■ Извлекайте из методологии разработки плюсы, даже если ее минусы мешают вам работать.

*****

Внутреннее состояние оказывает огромное влияние на вашу работу.
Пожалуйста, остановитесь и еще раз прочитайте предыдущее предложение. Я серьезно.
Вам может казаться, что работа – это исключительно набор навыков, технический склад ума или просто опыт, но, поверьте мне, самочувствие сказывается на ней больше, чем вы можете себе представить.
Отмечайте то, что вас радует. Возможно, это новые проекты, сложные задачи, какие-то конкретные технологии или направления разработки. А может, вы радуетесь, когда гла-дите страуса или готовите домашнюю пиццу. Какая-нибудь мелочь, которая делает счастливым лично вас, может дать вам мотивацию на неделю работы вперед. Замечайте это, запоминайте то, что дает вам силы.

*****

Тезисы ■ Ваше внутреннее состояние – залог качественной работы.
■ Вы должны заботиться о себе.
■ Ваши ментальное и физическое состояния тесно связаны, не надейтесь удерживать на плаву что-то одно.
■ Находите и создавайте поводы для радости.

*****

Тезисы ■ Выгорание однажды случится и с вами.
■ Остановитесь.
■ Не смейте себя упрекать и дайте себе столько времени, сколько нужно.
■  Помните, что вы не  тождественны своей работе: вы значительно важнее, чем она.
В.  Швец.  «От джуна до сеньора. Как стать востребованным разработчиком» 91 ■  Выгорание и  депрессия  – частые спутники; если перестаете справляться сами, обязательно обратитесь за помощью.

*****

В  самом начале карьеры вы должны сосредоточить свое внимание только на  одном:
на  самообразовании. Учитесь, читайте, пробуйте, ошибайтесь. Если вы боитесь высоты, но при этом идете по узкой горной тропинке, не позволяйте себе смотреть вниз. У вас всего одна задача: шаг за шагом двигаться вперед. Шаг вперед, еще шаг, еще шажок.
Выберите технологию, которая вам нравится. Занимайтесь ею, изучайте ее. Интерес к этой технологии будет поддерживать вашу мотивацию. Не переживайте и не думайте, что упускаете что-то в мире

*****

Ни один ваш шаг не окажется лишним. Сегодня вы узнаете что-то новое, а потом смо-жете наблюдать, как оно изменяется, эволюционирует. Как свежая идея, добавленная в новый язык программирования, спустя 10 лет становится стандартом индустрии. Как маленькая биб-лиотека, которая должна была облегчать работу одного разработчика, превращается в полно-ценный инструмент, которым пользуются разработчики по всему миру. То, что вы узнаёте, облегчает весь ваш дальнейший путь. Эти знания позволят вам с каждым шагом двигаться все увереннее и быстрее.

*****

Возможно, вы не поверите в то, что я сейчас скажу, но хотя бы запомните эту мысль и постарайтесь пожить с ней, применить ее на практике, дать ей шанс. Происходящие с нами события не определяют наше дальнейшее поведение. Приведу пример. Допустим, у нас есть два сотрудника, которых решили уволить. Само событие увольнения для них абсолютно одно и то же, но один расценит его как проблему, необходимость поиска новой работы, професси-ональную неудачу. Второй же увидит возможность найти более интересную компанию, проект и должность, получить новый опыт работы.
Одно и то же

*****

Помните: не все, что происходит в нашей жизни, по-настоящему важно. Но современный мир настолько требователен и стремителен, что кажется, будто любое событие ставит нас перед выбором: жизнь или смерть. Это не так. Вы в ответе за свою жизнь, за свои эмоции. Не давайте событиям управлять вами.
И не забывайте: абсолютно все события – хорошие, плохие, неожиданные или заплани-рованные – дают

*****

Тезисы ■ Мы в ответе за то, как реагируем на жизненные события.
■ Учитесь реагировать так, как хотели бы, а не так, как получается.
■  Не  позволяйте событиям управлять вашей жизнью, какие  бы трудности они за собой ни влекли.

*****

Неспособность похвалить себя – одна из самых страшных болезней профессионалов.
Если вы еще не слышали про синдром самозванца, самое время прочитать про него. Я не пре-тендую на знание статистики, но практически все IT-профессионалы, которых я встречал, страдали этим недугом. Отчасти это связано с тем, что перфекционизм – неотъемлемая часть нашей профессии. Отчасти – с тем, что любой профессиональный разработчик постоянно раз-вивается, и этот нескончаемый поток новых знаний не дает ему времени прерваться и сказать себе, что он (вообще-то!) молодец.
Многие зараженные этой болезнью

*****

Выкиньте в мусор установки родителей о том, как и за что вас надо хвалить. Выкиньте в мусор фразу «то, что не убивает нас, делает нас сильнее». Вы не перестанете быть професси-оналом, если признаете свои заслуги. Хвалите себя. Вы каждый день создаете что-то из ничего.
Вы каждый день двигаете человечество вперед (нет, это не высокопарные слова, вы точно вни-мательно читаете эту тему?). Ваши достижения – результат невероятного труда и опыта. Если вы не будете хвалить себя сами, то придется вечно ждать этого от кого-то другого.
Начните с  себя, но  не  останавливайтесь на  этом. Когда вы достаточно продвинетесь в своей карьере и будете работать на руководящей должности, продолжайте следовать этому правилу. Хвалите коллег, когда они хорошо выполняют работу, хвалите их, когда понимаете, что это им нужно. Делайте это искренне по отношению к себе и к другим людям.

*****

Тот, кто сказал вам, что хвалить себя некрасиво, соврал.
■ Делайте паузу и говорите себе, что вы молодец, даже если не чувствуете этого.
■ Умение похвалить себя – это умение похвалить и другого.
Задание Думаю, вы догадываетесь, что я попрошу вас сделать. Хвалите себя!
Написали классный компонент – скажите себе спасибо. Разработали биллинг для  своего проекта  – немедленное спасибо. Не  бойтесь, что вы себя перехвалите. Если вам трудно похвалить себя за  хорошую работу, то перехвалить себя вам не удастся. Будьте честным с собой, уважайте и цените свой труд.

*****

Я долго учился хвалить себя. Если быть совсем точным, то я учился хвалить себя ОЧЕНЬ ДОЛГО И МУЧИТЕЛЬНО. Потребовались годы, чтобы В.  Швец.  «От джуна до сеньора. Как стать востребованным разработчиком» 99 я перестал считать, что чем больше буду себя упрекать за  неидеальную работу, тем сильнее буду становиться как разработчик. Наглая, отвратительная ложь, которой я пичкал и  пичкал себя, пока не  становилось тошно. Нет, я не  встаю перед зеркалом каждое утро и  не  произношу: «Да что  же это у  нас тут за  замечательный программист, да ты  же мое солнышко».
Для меня умение хвалить себя стало концом постоянных самоупреков, концом вечной неудовлетворенности своей работой. Я научился воспринимать ее отстраненно. С уважением, со вниманием, с конструктивной критикой, если в ней есть что улучшить.

*****

Тезисы ■ Желание выполнить работу качественно – прекрасная черта.
■  Перфекционизм  – неспособность увидеть разницу между качественным и идеальным решением.
■  Не  пытайтесь избавиться от  перфекционизма, прибегайте к  нему в разумных пределах.
■  Держитесь за  реальность, не  позволяйте фантазиям об  идеальных решениях сбить вас с толку.

*****

Гордыня заставляет нас ставить себя выше других людей, считать, что только мы знаем, как сделать что-то лучше, как добиться того, чего другие (по нашему мнению) не смогут. Вы определенно можете быть бриллиантом своей компании и действительно разбираться во многих вопросах лучше коллег. Но само чувство иллюзорного превосходства над другими способно отравить не только вашу жизнь, но и жизнь людей вокруг вас.
Гордыня появляется настолько незаметно, что мы часто

*****

Гордыня – это башня из слоновой кости, на которую мы поднимаемся благодаря сво-ему опыту и профессионализму. Поднимаемся так высоко, что забываем, как выглядела лест-ница и  как  много прекрасных людей встретили по  пути. Гордыня поджидает нас наверху, и как только мы попадаем в ее цепкие лапы, мы становимся хуже, в первую очередь как про-фессионалы. Гордыня заставляет нас терять объективность, ведь теперь самое важное для нас – наш собственный опыт. Гордыня заставляет нас игнорировать мнения других людей: зачем они, если мы можем лишний раз послушать себя!

*****

Тезисы ■ Гордость за себя – прекрасное чувство, гордыня – безусловное зло.
■ Гордыня возникает в нас незаметно.
■ Гордыня нанесет вам удар в спину в самый неподходящий момент.

*****

Тезисы ■ От любого проекта можно устать.
■  Pet projects  – простой способ поднять себе настроение и  вернуть мотивацию.
■  Работая над  проектами, которые доставляют удовольствие, вы значительно быстрее получаете новые знания.
■ Если у вас не хватает времени на свой pet project, не расстраивайтесь, просто включите его в свое расписание заранее.

*****

Тезисы ■ В реальном мире разработка программного продукта редко бывает размеренной и спокойной.
■ Выброс адреналина от авральной работы может быть очень приятным, но это иллюзия.
■  Подъем сил и  радость от  «охоты» сменяются горечью и разочарованием.
■ Авральная работа – первый шаг к выгоранию и депрессии.

*****

Тезисы ■ Фиксированный график – это замечательно, но часто несбыточно.
■ Вам критически необходимо время, свободное от работы.
■ Только вы знаете, на что тратить свободное время.

*****

Тезисы ■ Удаленная работа подходит не всем.
■  Попробуйте работать в  офисе и  удаленно: у  вас должно быть представление о том и другом формате.
■ Исходите из особенностей своей личности и характера.

*****

Да, ваш код важен для вас. Однако просьба изменить его – это не просьба забыть о нем, сделать вид, что его не существовало. Вы сделали его максимально качественно, но теперь он должен приобрести другую форму. Скорее всего, он станет только лучше – кому, как не вам, знать, что с ним сделать, чтобы он стал лучше. Не поддавайтесь унынию, если приходится удалять прекрасное, на ваш взгляд, решение. Да, придется пересмотреть его, но, возможно, именно тогда вы увидите еще лучшее решение.
Если требований

*****

Тезисы ■ Однажды вас обязательно попросят изменить то, что вы создавали с любовью.
■ Ваш код – это не вы сами; пока есть вы сами, вы напишете код еще лучше.
■  Если ваш код постоянно подвергается нападкам, найдите себе отдушину.

*****

Мне было очень тяжело принимать исправления в своем коде, я долгое время воспринимал это именно как личную критику, раз за разом попадая в эту ловушку. Даже когда мне казалось, что я перешагнул через эту слабость, она снова давала о себе знать. Спасло меня то, что такое отношение никак мне не  помогало. Мне все  равно приходилось исправлять код, но  каждый раз это стоило мне немалой нервотрепки. И я стал относиться к этому более прагматично, разделяя работу и  связанный с  ней стресс. Работа должна оставаться работой, а  ваши эмоции  – только вашими; эти пласты жизни определенно не стоит смешивать в очень горький коктейль.

*****

Тезисы ■  В  IT всегда найдется направление разработки, которое будет вам интересно.
■ Не жалейте времени, попробуйте разные направления, узнайте, от чего получаете удовольствие.
■ Путь к новым направлениям всегда открыт, вы в любой момент можете попробовать что-то другое.
■ Следуйте за своими желаниями.

*****

Не позволяйте себя торопить. Специфика коммерческой разработки очевидна – продукт нужен «вчера», однако не разрешайте манипулировать собой и не поступайтесь качеством работы. Ваша задача как профессионала – написать качественный продукт, не стоит пытаться играть по чужим правилам и срезать углы. Хороший продукт проработает много лет, слабый будет закрыт – вот так все просто.

*****

О требованиях к продукту: собирайте их, группируйте, работайте с экспертами в пред-метной области проекта, изучайте ее самостоятельно. Вы должны быть максимально ознаком-лены со спецификой той области, для которой пишете продукт. Составляйте списки вопросов, терроризируйте заказчиков или менеджеров – их должно тошнить от вашей въедливости. Люди не всегда хорошо структурируют свои знания: забывают о важном, придают вес незначитель-ному и т. д. Ваша задача на первом этапе – выделить главные и проблемные направления буду-щего продукта, область его применения и основные функции.

*****

Будьте заранее готовы к тому, что, когда работа над проектом будет уже в самом разгаре, часть требований окажется неактуальной. Это распространенный сценарий, он не должен деморализовать вас. Любой продукт – живой, он будет развиваться и видоизменяться. Ваша задача – определить его возможности и рамки, в которых он будет существовать.

*****

Ваши заказчики или эксперты в предметной области наверняка проанализировали рынок на предмет аналогичных продуктов. Но вам тоже будет нужно провести свое исследование, чтобы представлять, как работают существующие аналоги, насколько они удобны и каким тре-бованиям соответствуют. В большинстве случаев вам будет доступна только пользовательская часть системы, поэтому постарайтесь извлечь из нее максимум сведений, обращая особое вни-мание на те моменты в ее работе, которые пересекаются с требованиями для вашей системы.
Отдельным важным шагом будет выбор технологического стека для  вашего проекта:
языка программирования, инструментов, компонентов и библиотек. Для многих разработчи-ков ощущения на этом этапе будут похожи на восторг ребенка в магазине игрушек. Получите от этого процесса максимум удовольствия, но не позволяйте эйфории взять верх – набирая В.  Швец.  «От джуна до сеньора. Как стать востребованным разработчиком» 118

*****

Ограничьте время анализа по  конкретным вопросам, иначе вы рискуете столкнуться с  аналитическим шоком и  неспособностью принять решение. Если чувствуете, что анализ какого-либо вопроса занимает больше времени, чем должен, перейдите к следующему пункту.
Если все равно сомневаетесь при каждом принятии решения, постарайтесь понять, говорит ли это ваша тревожность или есть объективные сомнения в правильности выбора. Тревожность необходимо просто принять: вы были бы отвратительным специалистом, если бы не чувство-вали ответственности за свои действия. Объективные же сомнения можно отбросить, доско-нально проанализировав вопрос и выбрав максимально приемлемый вариант. Возможно, он не будет идеальным, но выбор уже сделан и вы больше не рефлексируете над ним.

*****

Если вы чувствуете, что начали прокрастинировать, это абсолютно нормально и ожида-емо. Совет здесь будет только один: начинайте работать. Через силу, через усталость и неже-лание, но начинайте работать по чуть-чуть, выполняя какие-то легкие, но необходимые задачи для нового проекта. Это может быть подготовка инфраструктуры приложения, организация загрузчиков или билд-системы. Черт, да вы можете потратить время на проработку формата вывода в лог, главное – начать делать хоть что-то, и вы обязательно втянетесь в работу в про-цессе.

*****

Не паникуйте, получайте удовольствие от процесса.
■ Досконально изучите предметную область.
■ Узнайте максимум об аналогах и конкурентах.
■ Не позволяйте эйфории от выбора технологий затмить требования проекта.
■ Не позволяйте себе впадать в аналитический шок.
■ Устанавливайте свои сроки и учитывайте приоритеты.
